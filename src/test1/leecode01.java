package test1;

import java.util.ArrayList;
import java.util.HashSet;

/**
 剑指 Offer II 005. 单词长度的最大乘积
 给定一个字符串数组 words，请计算当两个字符串 words[i] 和 words[j] 不包含相同字符时，它们长度的乘积的最大值。假设字符串中只包含英语的小写字母。如果没有不包含相同字符的一对字符串，返回 0。

 示例 1:

 输入: words = ["abcw","baz","foo","bar","fxyz","abcdef"]
 输出: 16
 解释: 这两个单词为 "abcw", "fxyz"。它们不包含相同字符，且长度的乘积最大。
 示例 2:

 输入: words = ["a","ab","abc","d","cd","bcd","abcd"]
 输出: 4
 解释: 这两个单词为 "ab", "cd"。
 示例 3:

 输入: words = ["a","aa","aaa","aaaa"]
 输出: 0
 解释: 不存在这样的两个单词。
 4194311  33554435
 */
public class leecode01 {
    public static void main(String[] args) {
        String[] words = {"abcw", "baz", "foo", "bar", "fxyz", "abcdef"};
        int max=0;
        int len = words.length;
        int [] nums = new int [len];
        for (int i = 0; i < words.length; i++) {
            for (int j = 0; j <words[i].length() ; j++) {
                nums[i]|=(1<<words[i].charAt(j)-'a');
            }
        }
        for (int i = 0; i < nums.length-1; i++) {
            for (int j = i+1; j <nums.length ; j++) {
                if((nums[i]& nums[j])==0){
                   max=Math.max(max,words[i].length()*words[j].length());
                }
            }

        }
       // return max;
    }
}
